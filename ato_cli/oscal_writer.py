"""
oscal_writer.py  â€“  Minimal helper to create an OSCAL SSP stub
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ…  Converts the consolidated scan results produced by ato_checker.py
    into a valid (but minimal) OSCAL System Security Plan JSON.

Usage
-----
from oscal_writer import write_oscal

write_oscal(results_dict, "report_oscal.json")
"""

from __future__ import annotations
import json, uuid, datetime
from typing import Dict, Any


def _iso_now() -> str:
    """Return current timestamp in ISO-8601 format (UTC)."""
    return datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"


def write_oscal(results: Dict[str, Dict[str, Any]], out_path: str) -> None:
    """
    Parameters
    ----------
    results   A dict keyed by control-id, e.g.:
              {
                  "SC-12": {
                      "status": "not compliant",
                      "reason": "No TLS found",
                      "suggestion": "Use TLS 1.2+"
                  },
                  ...
              }

    out_path  File path to write (should end in .json)
    """
    # â”€â”€ Root SSP skeleton â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    ssp = {
        "system-security-plan": {
            "uuid": str(uuid.uuid4()),
            "metadata": {
                "title": "ATO CLI â€“ Pilot SSP",
                "last-modified": _iso_now(),
                "version": "0.1",
                "oscal-version": "1.1.0"
            },
            "system-characteristics": {
                "description": "Minimal SSP generated by ato_cli pilot.",
                "security-sensitivity-level": "moderate",
                "system-ids": [{"identifier-type": "serial-number", "identifier": "ato-cli-pilot"}],
            },
            "control-implementation": {
                "components": [{
                    "component-uuid": "comp-1",
                    "type": "software",
                    "title": "ATO CLI Pilot",
                    "description": "CLI scanner MVP generating control statements.",
                    "implemented-requirements": []
                }]
            }
        }
    }

    impl_reqs = (
        ssp["system-security-plan"]["control-implementation"]["components"][0]
        ["implemented-requirements"]
    )

    # â”€â”€ Map each control result into an implementedRequirement â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    for cid, r in results.items():
        entry = {
            "control-id": cid,
            "description": r.get("reason", ""),
            "props": [
                {"name": "status", "value": r["status"]},
            ],
        }
        if "suggestion" in r:
            entry["remarks"] = r["suggestion"]
        impl_reqs.append(entry)

    # â”€â”€ Write JSON to disk â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    with open(out_path, "w", encoding="utf-8") as fp:
        json.dump(ssp, fp, indent=2)

    print(f"ðŸ—„  OSCAL SSP written to: {out_path}")
